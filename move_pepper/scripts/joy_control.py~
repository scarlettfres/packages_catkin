#!/usr/bin/env python
import roslib
import rospy
import naoqi
import time


from razer_hydra.msg import Hydra
from std_msgs.msg import Empty
from std_msgs.msg import String

from geometry_msgs.msg import Twist # for sending commands to the drone
from naoqi import ALProxy


class NaoRazer:
	

	def __init__(self):
		self.FLAG=False
		#pour homme 
		self.initLeftX=0
		self.initLeftY=0
		self.initLeftZ=0
		self.initRightX=0
		self.initRightY=0
		self.initRightZ=0
		#pour Nao
		self.XleftNao=0
		self.YleftNao=0
		self.ZleftNao=0
		
		self.r1leftNao = 0
		self.r2leftNao= 0
		self.r3leftNao=0
		
		self.XrightNao=0
		self.YrightNao=0
		self.ZrightNao=0

	
		self.init()

	def callback(self,data):
		Xleft = data.paddles[0].transform.translation.x
		Yleft = data.paddles[0].transform.translation.y
		Zleft = data.paddles[0].transform.translation.z
		
		Xright = data.paddles[1].transform.translation.x
		Yright = data.paddles[1].transform.translation.y
		Zright = data.paddles[1].transform.translation.z
		
		

		"""XleftRot = data.paddles[0].transform.rotation.x
		YleftRot = data.paddles[0].transform.rotation.y
		ZleftRot = data.paddles[0].transform.rotation.z"""
		
		"""XrightRot = data.paddles[1].transform.rotation.x
		YrightRot = data.paddles[1].transform.rotation.y
		ZrightRot= data.paddles[1].transform.rotation.z"""

		if data.paddles[0].buttons[0] == True:
			self.FLAG=True
			self.calibrage(Xleft,Yleft,Zleft,Xright,Yright,Zright)
			
		if data.paddles[0].buttons[1] == True:
			self.postureProxy.goToPosture("StandInit", 0.5)
			
			
		Xleft=Xleft-self.initLeftX
		Yleft=Yleft-self.initLeftY
		Zleft=Zleft-self.initLeftZ
		
		Xright=Xright-self.initRightX
		Yright=Yright-self.initRightY
		Zright=Zright-self.initRightZ
		
		
		
		if self.FLAG==True:
			self.move(Xleft,Yleft,Zleft,Xright,Yright,Zright)
	

	def init(self):
		rospy.init_node('mon_node', anonymous=True)
		self.motionProxy = ALProxy("ALMotion","127.0.0.1",9559)
		self.postureProxy = ALProxy("ALRobotPosture", "127.0.0.1",9559)
		self.motionProxy.setStiffnesses("LArm", 1.0)
		self.motionProxy.setStiffnesses("RArm", 1.0)
			
   		
   		self.motionProxy.wbEnableEffectorControl("LArm", False)
   		print("Wait ...")
		self.postureProxy.goToPosture("StandInit", 0.5)
		print("Ready !")

		# Active LArm tracking
		#isEnabled = True
		#self.motionProxy.wbEnableEffectorControl("LArm", isEnabled)
		#self.motionProxy.wbEnableEffectorControl("RArm", isEnabled)

		"""coef = 1.0
		if (effectorName == "LArm"):
		coef = +1.0
		elif (effectorName == "RArm"):
		coef = -1.0"""






		rospy.Subscriber("/hydra_calib", Hydra, self.callback)
			
		rospy.spin()
		
	def calibrage(self,Xleft,Yleft,Zleft,Xright,Yright,Zright):
		print ( "======>>>INIT<<<======" ) 
		# pour homme 
		self.initLeftX=Xleft
		self.initLeftY=Yleft
		self.initLeftZ=Zleft
		
		self.initXRight=Xright
		self.initYRight=Yright
		self.initZRight=Zright
		
		# pour nao 
		
		PositionLeft = self.motionProxy.getPosition('LArm',0, True)
		PositionRight = self.motionProxy.getPosition('RArm',0, True)
		print(PositionLeft)
		self.XleftNao = PositionLeft[0]
		self.YleftNao= PositionLeft[1]
		self.ZleftNao=PositionLeft[2]
		self.r1leftNao = PositionLeft[3]
		self.r2leftNao= PositionLeft[4]
		self.r3leftNao=PositionLeft[5]
		
		self.XrightNao=PositionRight[0]
		self.YrightNao=PositionRight[1]
		self.ZrightNao=PositionRight[2]
		self.r1rightNao = PositionLeft[3]
		self.r2rightNao= PositionLeft[4]
		self.r3rightNao=PositionLeft[5]

		
		
		


	def move(self,x,y,z,xr,yr,zr):
		
		
		
		#self.motionProxy.wbEnable(True)	# active whole body control 
		
		PositionLeft = self.motionProxy.getPosition('RArm',0, True)
		print ("x ",PositionLeft[0])
		print ("y ",PositionLeft[1])
		print ("z",PositionLeft[2])
		
		
		vectl= [x/3.+self.XleftNao,y/3.+self.YleftNao,z/3.+self.ZleftNao,self.r1leftNao,self.r2leftNao,self.r3leftNao]
		vectr= [xr+self.XrightNao,yr+self.YrightNao,zr+self.ZrightNao,self.r1rightNao,self.r2rightNao,self.r3rightNao]
		
		
		
		ecartx = PositionLeft[0]-(x/3+self.XleftNao)
		ecarty = PositionLeft[1]-(y/3+self.YleftNao)
		ecartz = PositionLeft[2]-(z/3+self.ZleftNao)
		print "ecartx =", ecartx
		print "ecarty =", ecarty
		print "ecartz =", ecartz
		#self.motionProxy.wbSetEffectorControl("LArm", vectl)
		#self.motionProxy.wbSetEffectorControl("RArm", vectr)
		
			
		#self.motionProxy.setPosition ("LArm", 0, vectl, 0.5, 7)
		
		#self.motionProxy.setPosition ("RArm", 0, [0.,0.,1,0.,0.,0.], 0.5, 7)
	
	


if __name__ == '__main__':
    NaoRazer()
